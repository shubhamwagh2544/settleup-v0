generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int            @id @default(autoincrement()) @map("id")
  firstName            String?        @map("first_name") @db.VarChar(255)
  lastName             String?        @map("last_name") @db.VarChar(255)
  email                String         @unique @map("email") @db.VarChar(255)
  password             String         @map("password") @db.VarChar(255)
  phoneNumber          String?        @unique @map("phone_number") @db.VarChar(255)
  address              String?        @map("address") @db.VarChar(255)
  profilePic           String?        @map("profile_pic") @db.VarChar(255)
  createdAt            DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime       @default(now()) @map("updated_at") @db.Timestamp(6)
  isActive             Boolean        @default(true) @map("is_active")
  mfaEnabled           Boolean?       @default(false) @map("mfa_enabled")
  defaultLang          String?        @default("en") @map("default_lang") @db.VarChar(255)
  isPrivate            Boolean?       @default(false) @map("is_private")
  isSuperAdmin         Boolean        @default(false) @map("is_super_admin")
  accounts             Account[]
  notifications        Notification[]
  receivedTransactions Transaction[]  @relation("ReceiverTransactions")
  sentTransactions     Transaction[]  @relation("SenderTransactions")
  expenses             UserExpense[]
  rooms                UserRoom[]
}

model Room {
  id            Int            @id @default(autoincrement()) @map("id")
  name          String         @unique @map("name") @db.VarChar(255)
  description   String?        @map("description")
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime       @default(now()) @map("updated_at") @db.Timestamp(6)
  roomType      String         @default("public") @map("room_type") @db.VarChar(255)
  roomPic       String?        @map("room_pic") @db.VarChar(255)
  isActive      Boolean        @default(true) @map("is_active")
  isDefault     Boolean        @default(false) @map("is_default")
  expenses      Expense[]
  notifications Notification[]
  users         UserRoom[]
}

model UserRoom {
  id      Int     @id @default(autoincrement())
  userId  Int
  roomId  Int
  isAdmin Boolean @default(false) @map("is_admin")
  room    Room    @relation(fields: [roomId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([userId, roomId])
}

model Expense {
  id            Int            @id @default(autoincrement()) @map("id")
  name          String         @map("name") @db.VarChar(255)
  description   String?        @map("description")
  amount        Decimal        @map("amount") @db.Decimal(10, 2)
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime       @default(now()) @map("updated_at") @db.Timestamp(6)
  roomId        Int
  isSettled     Boolean        @default(false) @map("is_settled")
  room          Room           @relation(fields: [roomId], references: [id])
  notifications Notification[]
  transactions  Transaction[]
  users         UserExpense[]
}

model UserExpense {
  id         Int     @id @default(autoincrement())
  userId     Int
  expenseId  Int
  isLender   Boolean @default(false) @map("is_lender")
  amountOwed Decimal @map("amount_owed") @db.Decimal(10, 2)
  isSettled  Boolean @default(false) @map("is_settled")
  expense    Expense @relation(fields: [expenseId], references: [id])
  user       User    @relation(fields: [userId], references: [id])

  @@unique([userId, expenseId])
}

model Account {
  id                   Int           @id @default(autoincrement()) @map("id")
  accountType          String        @map("account_type") @db.VarChar(50)
  status               String        @default("active") @map("status") @db.VarChar(50)
  balance              Decimal       @default(0) @map("balance") @db.Decimal(10, 2)
  lastLoginAt          DateTime?     @map("last_login_at") @db.Timestamp(6)
  failedLoginAttempts  Int?          @default(0) @map("failed_login_attempts")
  verificationToken    String?       @map("verification_token") @db.VarChar(255)
  resetPasswordToken   String?       @map("reset_password_token") @db.VarChar(255)
  resetPasswordExpires DateTime?     @map("reset_password_expires") @db.Timestamp(6)
  twoFactorSecret      String?       @map("two_factor_secret") @db.VarChar(255)
  createdAt            DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime      @default(now()) @map("updated_at") @db.Timestamp(6)
  userId               Int           @map("user_id")
  accountName          String        @map("account_name") @db.VarChar(50)
  accountNumber        String        @unique @map("account_number") @db.VarChar(16)
  user                 User          @relation(fields: [userId], references: [id])
  receivedTransactions Transaction[] @relation("ReceiverAccountTransactions")
  sentTransactions     Transaction[] @relation("SenderAccountTransactions")
}

model Transaction {
  id                Int               @id @default(autoincrement()) @map("id")
  amount            Decimal           @map("amount") @db.Decimal(10, 2)
  type              TransactionType   @default(TRANSFER) @map("type")
  description       String?           @map("description")
  createdAt         DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  status            TransactionStatus @default(PENDING) @map("status")
  senderAccountId   Int?
  receiverAccountId Int?
  senderId          Int?
  receiverId        Int?
  expenseId         Int?              @map("expense_id")
  direction         String?           @default("outgoing")
  expense           Expense?          @relation(fields: [expenseId], references: [id])
  receiverAccount   Account?          @relation("ReceiverAccountTransactions", fields: [receiverAccountId], references: [id])
  receiver          User?             @relation("ReceiverTransactions", fields: [receiverId], references: [id])
  senderAccount     Account?          @relation("SenderAccountTransactions", fields: [senderAccountId], references: [id])
  sender            User?             @relation("SenderTransactions", fields: [senderId], references: [id])
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  payload   Json
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    Int
  roomId    Int?
  expenseId Int?
  expense   Expense?         @relation(fields: [expenseId], references: [id])
  room      Room?            @relation(fields: [roomId], references: [id])
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@index([isRead])
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum TransactionType {
  TRANSFER
  DEPOSIT
  WITHDRAWAL
  EXPENSE_SETTLEMENT
}

enum NotificationType {
  EXPENSE_CREATED
  EXPENSE_UPDATED
  EXPENSE_DELETED
  USER_ADDED_TO_ROOM
  SETTLEMENT_REQUEST
  PAYMENT_CONFIRMED
  ROOM_UPDATED
}
